/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CMMS.FrontEnd;

import CMMS.Models.note;
import CMMS.ServiceLayer.NoteServiceLayer;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ransa
 */
public class HO_View_Note_Panel extends javax.swing.JPanel {

    /**
     * Creates new form HO_View_Note_Panel
     */
    public HO_View_Note_Panel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        NoteTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtBrnID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtMntId = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        chkReadNote = new javax.swing.JCheckBox();
        chkUpdatedNotes = new javax.swing.JCheckBox();

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Notes");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setOpaque(true);

        NoteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Maintenance ID", "Supplier ID", "Note", "Cost"
            }
        ));
        NoteTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NoteTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(NoteTable);

        jLabel2.setText("Branch ID: ");

        jLabel3.setText("Maintenance ID: ");

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Mark as read");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        chkReadNote.setText("Show read notes");
        chkReadNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkReadNoteActionPerformed(evt);
            }
        });

        chkUpdatedNotes.setText("Show updated notes");
        chkUpdatedNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUpdatedNotesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(40, 40, 40))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtBrnID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtMntId, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(556, 556, 556)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkUpdatedNotes)
                            .addComponent(chkReadNote))
                        .addGap(20, 20, 20))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtBrnID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMntId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(chkReadNote))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(chkUpdatedNotes))
                .addContainerGap(99, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void NoteTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NoteTableMouseClicked
        String mntid = NoteTable.getModel().getValueAt(NoteTable.getSelectedRow(), 0).toString();
        txtMntId.setText(mntid);
    }//GEN-LAST:event_NoteTableMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int brnid = Integer.parseInt(txtBrnID.getText());
         if ( brnid > 0 )
        {
        String serKey = txtMntId.getText();
        if ( serKey == null ) {
            JOptionPane.showMessageDialog(this, "Please provide valid Note ID!", "Error!", 2);
        }
        boolean res = NoteServiceLayer.updateViewStatus(serKey);
        if ( res ){
            ArrayList<note> allnte = NoteServiceLayer.GetUnreadNote(brnid);

            DefaultTableModel dtm = (DefaultTableModel) NoteTable.getModel();
            dtm.setRowCount(0);

            for ( note nte : allnte ){
                Object[] rowData = {
                    nte.getMntID(),
                    nte.getSupID(),
                    nte.getDetails(),
                    nte.getCost()
                };

                dtm.addRow(rowData);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Note ID!", "Error!", 2);
        }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Branch ID!", "Error!", 2);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int brnid = Integer.parseInt(txtBrnID.getText());
         if ( brnid > 0 )
        {
        String serKey = txtMntId.getText();
        if ( serKey == null ) {
            JOptionPane.showMessageDialog(this, "Please provide valid Note ID!", "Error!", 2);
        }
        ArrayList<note> serNote = NoteServiceLayer.SearchNote(serKey, brnid);
        if ( serNote.size() > 0 )
        {
            DefaultTableModel dtm = (DefaultTableModel) NoteTable.getModel();
            dtm.setRowCount(0);

            for ( note nte : serNote ){
                Object[] rowData = {
                    nte.getMntID(),
                    nte.getSupID(),
                    nte.getDetails(),
                    nte.getCost()
                };

                dtm.addRow(rowData);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Note ID!", "Error!", 2);
        }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Branch ID!", "Error!", 2);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void chkReadNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkReadNoteActionPerformed
        int brnid = Integer.parseInt(txtBrnID.getText());
         if ( brnid > 0 )
        {
        if ( chkReadNote.isSelected() == true )
        {
            ArrayList<note> readnte = NoteServiceLayer.GetReadNote(brnid);

            DefaultTableModel dtm = (DefaultTableModel) NoteTable.getModel();
            dtm.setRowCount(0);

            for ( note nte : readnte ){
                Object[] rowData = {
                    nte.getMntID(),
                    nte.getSupID(),
                    nte.getDetails(),
                    nte.getCost()
                };

                dtm.addRow(rowData);
            }
        } else {
            ArrayList<note> allnte = NoteServiceLayer.GetUnreadNote(brnid);

            DefaultTableModel dtm = (DefaultTableModel) NoteTable.getModel();
            dtm.setRowCount(0);

            for ( note nte : allnte ){
                Object[] rowData = {
                    nte.getMntID(),
                    nte.getSupID(),
                    nte.getDetails(),
                    nte.getCost()
                };

                dtm.addRow(rowData);
            }
        }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Branch ID!", "Error!", 2);
        }
    }//GEN-LAST:event_chkReadNoteActionPerformed

    private void chkUpdatedNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUpdatedNotesActionPerformed
        int brnid = Integer.parseInt(txtBrnID.getText());
         if ( brnid > 0 )
        {
        if ( chkUpdatedNotes.isSelected() == true )
        {
            ArrayList<note> updnte = NoteServiceLayer.GetUpdateNote(brnid);

            DefaultTableModel dtm = (DefaultTableModel) NoteTable.getModel();
            dtm.setRowCount(0);

            for ( note nte : updnte ){
                Object[] rowData = {
                    nte.getMntID(),
                    nte.getSupID(),
                    nte.getDetails(),
                    nte.getCost()
                };

                dtm.addRow(rowData);
            }
        } else {
            ArrayList<note> allnte = NoteServiceLayer.GetUnreadNote(brnid);

            DefaultTableModel dtm = (DefaultTableModel) NoteTable.getModel();
            dtm.setRowCount(0);

            for ( note nte : allnte ){
                Object[] rowData = {
                    nte.getMntID(),
                    nte.getSupID(),
                    nte.getDetails(),
                    nte.getCost()
                };

                dtm.addRow(rowData);
            }
        }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Branch ID!", "Error!", 2);
        }
    }//GEN-LAST:event_chkUpdatedNotesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int brnid = Integer.parseInt(txtBrnID.getText());
         if ( brnid > 0 )
        {
        ArrayList<note> allnte = NoteServiceLayer.GetUnreadNote(brnid);
        
        DefaultTableModel dtm = (DefaultTableModel) NoteTable.getModel();
        dtm.setRowCount(0);
        
        for ( note nte : allnte ){
            Object[] rowData = {
                nte.getMntID(),
                nte.getSupID(),
                nte.getDetails(),
                nte.getCost()
            };
            
            dtm.addRow(rowData);
        }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Branch ID!", "Error!", 2);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable NoteTable;
    private javax.swing.JCheckBox chkReadNote;
    private javax.swing.JCheckBox chkUpdatedNotes;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtBrnID;
    private javax.swing.JTextField txtMntId;
    // End of variables declaration//GEN-END:variables
}
