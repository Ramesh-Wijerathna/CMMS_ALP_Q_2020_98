/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CMMS.FrontEnd;

import CMMS.BusinessLayer.InventoryHealthManagement;
import CMMS.Models.Inventory;
import CMMS.ServiceLayer.EquipmentServiceLayer;
import CMMS.Utilities.EquipBranchIDNullException;
import CMMS.Utilities.EquipIDNullException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author ransa
 */
public class HO_View_Inventory_Panel extends javax.swing.JPanel {

    /**
     * Creates new form HO_View_Inventory_Panel
     */
    //int branchID = 0;
    public HO_View_Inventory_Panel() {
        initComponents();
    }

    Connection con;
    PreparedStatement pst;

    public void LoadInventory(int branchID) {
        String id = "";
        ArrayList<Inventory> eqps = EquipmentServiceLayer.GetAllEquipments(branchID);

        DefaultTableModel tbl = (DefaultTableModel) InventoryTable.getModel();
        tbl.setRowCount(0);

        for (Inventory inv : eqps) {
            Object[] rowData = {
                id = inv.getInID(),
                inv.getItemName(),
                inv.getModel(),
                inv.getSelialNumber(),
                inv.getItemValue(),
                inv.getInvNum(),
                inv.getSupID(),
                inv.getWarntDate(),
                inv.getInvDate(),
                inv.getIssCount(),
                InventoryHealthManagement.CountIssues(id),
                inv.getStatus()
            };
            tbl.addRow(rowData);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        chkREqp = new javax.swing.JCheckBox();
        chkDEqp = new javax.swing.JCheckBox();
        chkMEqp = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        InventoryTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtBranchID = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1097, 638));

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Inventory");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setOpaque(true);

        jLabel2.setText("Search by inventory ID: ");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Remove from Service");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Generate a Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        chkREqp.setText("View running equipments");
        chkREqp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkREqpActionPerformed(evt);
            }
        });

        chkDEqp.setText("View decommissioned equipments");
        chkDEqp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDEqpActionPerformed(evt);
            }
        });

        chkMEqp.setText("View under maintenance equipments");
        chkMEqp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMEqpActionPerformed(evt);
            }
        });

        InventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Inventory ID", "Item Name", "Model", "Serial No", "Value", "Invoice No", "Supplier ID", "Warranty Expire Date", "Warranty Exp Date", "Issue Count", "Health Status", "Status"
            }
        ));
        InventoryTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        InventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InventoryTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(InventoryTable);

        jLabel3.setText("Branch ID: ");

        jButton4.setText("View");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkDEqp)
                            .addComponent(chkMEqp)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chkREqp)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(38, 38, 38)
                        .addComponent(jButton2)
                        .addGap(0, 275, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtBranchID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtBranchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addComponent(jButton3)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkREqp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkDEqp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkMEqp)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //Equipment Search button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            String id = "";
            String EquipID = txtSearch.getText();
            if (EquipID.trim().isEmpty()) {
                throw new EquipIDNullException();
            }
            ArrayList<Inventory> seqps = EquipmentServiceLayer.HOSearchEquipment(EquipID);
            if (seqps.size() > 0) {
                DefaultTableModel tbl1 = (DefaultTableModel) InventoryTable.getModel();
                tbl1.setRowCount(0);

                for (Inventory inv : seqps) {
                    Object[] rowData = {
                        id = inv.getInID(),
                        inv.getItemName(),
                        inv.getModel(),
                        inv.getSelialNumber(),
                        inv.getItemValue(),
                        inv.getInvNum(),
                        inv.getSupID(),
                        inv.getWarntDate(),
                        inv.getInvDate(),
                        inv.getIssCount(),
                        InventoryHealthManagement.CountIssues(id),
                        inv.getStatus()
                    };
                    tbl1.addRow(rowData);
                }
            } else {
                JOptionPane.showMessageDialog(this, "There is no reocord of such item in inventory!", "Error!", 2);
            }
        } catch (EquipIDNullException ex1) {
            JOptionPane.showMessageDialog(this, ex1.getLocalizedMessage(), "Error!", 2);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    //Remove from the service button
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
             String id = "";
            String EquipID = txtSearch.getText();
            if (EquipID.trim().isEmpty()) {
                throw new EquipIDNullException();
            }
            String stat = "Out of service since: " + java.time.LocalDate.now();

            boolean res = EquipmentServiceLayer.HOupdateStatus(EquipID, stat);

            if (res == true) {
                JOptionPane.showMessageDialog(this, "Status updated successfully!");
                
                ArrayList<Inventory> seqps = EquipmentServiceLayer.HOSearchEquipment(EquipID);
            if (seqps.size() > 0) {
                DefaultTableModel tbl1 = (DefaultTableModel) InventoryTable.getModel();
                tbl1.setRowCount(0);

                for (Inventory inv : seqps) {
                    Object[] rowData = {
                        id = inv.getInID(),
                        inv.getItemName(),
                        inv.getModel(),
                        inv.getSelialNumber(),
                        inv.getItemValue(),
                        inv.getInvNum(),
                        inv.getSupID(),
                        inv.getWarntDate(),
                        inv.getInvDate(),
                        inv.getIssCount(),
                        InventoryHealthManagement.CountIssues(id),
                        inv.getStatus()
                    };
                    tbl1.addRow(rowData);
                }
            }
                
            } else {
                JOptionPane.showMessageDialog(this, "Failed update status!", "Error!", 2);
            }

        } catch (EquipIDNullException ex1) {
            JOptionPane.showMessageDialog(this, ex1.getLocalizedMessage(), "Error!", 2);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    //Generate a report button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            String tempbrID = txtBranchID.getText();
            int brID = Integer.parseInt(tempbrID);
            if (tempbrID.trim().isEmpty()) {
                throw new EquipBranchIDNullException();
            }
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/cmmsdb", "root", "");
            //InputStream url = getClass().getResourceAsStream("https://drive.google.com/file/d/1RKvY2VwWm2UxMMXKqnXzwg4nAPUg6BhZ/view?usp=sharing");
            JasperDesign invjDesign = JRXmlLoader.load("D:\\PPA\\CMMS_ALP_Q_2020_98-master\\src\\CMMS\\Reports\\Inventory.jrxml");
            
            String sqlquery = "SELECT * FROM `inventory` WHERE `brnID` = "+brID+" AND `status` LIKE 'Running%';";

            JRDesignQuery updateQuery = new JRDesignQuery();
            updateQuery.setText(sqlquery);
            invjDesign.setQuery(updateQuery);

            JasperReport invJreport = JasperCompileManager.compileReport(invjDesign);
            JasperPrint invJpriint = JasperFillManager.fillReport(invJreport, null, con);
            JasperViewer.viewReport(invJpriint,false);

        } catch (EquipBranchIDNullException ex2) {
            JOptionPane.showMessageDialog(this, ex2.getLocalizedMessage(), "Error!", 2);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(View_Inventory_Panel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(View_Inventory_Panel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JRException ex) {
            Logger.getLogger(View_Inventory_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    //View running equipments
    private void chkREqpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkREqpActionPerformed
        try {
            String tempbrID = txtBranchID.getText();
            int brID = Integer.parseInt(tempbrID);
            if (tempbrID.trim().isEmpty()) {
                throw new EquipBranchIDNullException();
            }
            String id2 = "";
            if (chkREqp.isSelected() == true) {
                ArrayList<Inventory> rinv = EquipmentServiceLayer.GetRunningEquipments(brID);

                DefaultTableModel dtm2 = (DefaultTableModel) InventoryTable.getModel();
                dtm2.setRowCount(0);

                for (Inventory inv : rinv) {
                    Object[] rowData = {
                        id2 = inv.getInID(),
                        inv.getItemName(),
                        inv.getModel(),
                        inv.getSelialNumber(),
                        inv.getItemValue(),
                        inv.getInvNum(),
                        inv.getSupID(),
                        inv.getWarntDate(),
                        inv.getInvDate(),
                        inv.getIssCount(),
                        InventoryHealthManagement.CountIssues(id2),
                        inv.getStatus()
                    };
                    dtm2.addRow(rowData);
                }
            } else {

                ArrayList<Inventory> eqps = EquipmentServiceLayer.GetAllEquipments(brID);

                DefaultTableModel tbl = (DefaultTableModel) InventoryTable.getModel();
                tbl.setRowCount(0);

                for (Inventory inv : eqps) {
                    Object[] rowData = {
                        id2 = inv.getInID(),
                        inv.getItemName(),
                        inv.getModel(),
                        inv.getSelialNumber(),
                        inv.getItemValue(),
                        inv.getInvNum(),
                        inv.getSupID(),
                        inv.getWarntDate(),
                        inv.getInvDate(),
                        inv.getIssCount(),
                        InventoryHealthManagement.CountIssues(id2),
                        inv.getStatus()
                    };
                    tbl.addRow(rowData);
                }
            }
        } catch (EquipBranchIDNullException ex1) {
            JOptionPane.showMessageDialog(this, ex1.getLocalizedMessage(), "Error!", 2);
        }
    }//GEN-LAST:event_chkREqpActionPerformed

    //View decomissioned equipments
    private void chkDEqpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDEqpActionPerformed
        try {
            String tempbrID = txtBranchID.getText();
            int brID = Integer.parseInt(tempbrID);
            if (tempbrID.trim().isEmpty()) {
                throw new EquipBranchIDNullException();
            }
            String id1 = "";
            if (chkDEqp.isSelected() == true) {
                ArrayList<Inventory> dinv = EquipmentServiceLayer.GetDecommissionedEquipments(brID);

                DefaultTableModel dtm1 = (DefaultTableModel) InventoryTable.getModel();
                dtm1.setRowCount(0);

                for (Inventory inv : dinv) {
                    Object[] rowData = {
                        id1 = inv.getInID(),
                        inv.getItemName(),
                        inv.getModel(),
                        inv.getSelialNumber(),
                        inv.getItemValue(),
                        inv.getInvNum(),
                        inv.getSupID(),
                        inv.getWarntDate(),
                        inv.getInvDate(),
                        inv.getIssCount(),
                        InventoryHealthManagement.CountIssues(id1),
                        inv.getStatus()
                    };
                    dtm1.addRow(rowData);
                }
            } else {

                ArrayList<Inventory> eqps = EquipmentServiceLayer.GetAllEquipments(brID);

                DefaultTableModel tbl = (DefaultTableModel) InventoryTable.getModel();
                tbl.setRowCount(0);

                for (Inventory inv : eqps) {
                    Object[] rowData = {
                        id1 = inv.getInID(),
                        inv.getItemName(),
                        inv.getModel(),
                        inv.getSelialNumber(),
                        inv.getItemValue(),
                        inv.getInvNum(),
                        inv.getSupID(),
                        inv.getWarntDate(),
                        inv.getInvDate(),
                        inv.getIssCount(),
                        InventoryHealthManagement.CountIssues(id1),
                        inv.getStatus()
                    };
                    tbl.addRow(rowData);
                }
            }
        } catch (EquipBranchIDNullException ex1) {
            JOptionPane.showMessageDialog(this, ex1.getLocalizedMessage(), "Error!", 2);
        }
    }//GEN-LAST:event_chkDEqpActionPerformed

    //View undermaintenance equipments
    private void chkMEqpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMEqpActionPerformed
        try {
            String tempbrID = txtBranchID.getText();
            int brID = Integer.parseInt(tempbrID);
            if (tempbrID.trim().isEmpty()) {
                throw new EquipBranchIDNullException();
            }
            String id3 = "";
            if (chkMEqp.isSelected() == true) {
                ArrayList<Inventory> uminv = EquipmentServiceLayer.GetUnderMaintenancedEquipments(brID);

                DefaultTableModel dtm3 = (DefaultTableModel) InventoryTable.getModel();
                dtm3.setRowCount(0);

                for (Inventory inv : uminv) {
                    Object[] rowData = {
                        id3 = inv.getInID(),
                        inv.getItemName(),
                        inv.getModel(),
                        inv.getSelialNumber(),
                        inv.getItemValue(),
                        inv.getInvNum(),
                        inv.getSupID(),
                        inv.getWarntDate(),
                        inv.getInvDate(),
                        inv.getIssCount(),
                        InventoryHealthManagement.CountIssues(id3),
                        inv.getStatus()
                    };
                    dtm3.addRow(rowData);
                }
            } else {

                ArrayList<Inventory> eqps = EquipmentServiceLayer.GetAllEquipments(brID);

                DefaultTableModel tbl = (DefaultTableModel) InventoryTable.getModel();
                tbl.setRowCount(0);

                for (Inventory inv : eqps) {
                    Object[] rowData = {
                        id3 = inv.getInID(),
                        inv.getItemName(),
                        inv.getModel(),
                        inv.getSelialNumber(),
                        inv.getItemValue(),
                        inv.getInvNum(),
                        inv.getSupID(),
                        inv.getWarntDate(),
                        inv.getInvDate(),
                        inv.getIssCount(),
                        InventoryHealthManagement.CountIssues(id3),
                        inv.getStatus()
                    };
                    tbl.addRow(rowData);
                }
            }
        } catch (EquipBranchIDNullException ex1) {
            JOptionPane.showMessageDialog(this, ex1.getLocalizedMessage(), "Error!", 2);
        }
    }//GEN-LAST:event_chkMEqpActionPerformed

    private void InventoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InventoryTableMouseClicked
        String invId = InventoryTable.getModel().getValueAt(InventoryTable.getSelectedRow(), 0).toString();
        txtSearch.setText(invId);
    }//GEN-LAST:event_InventoryTableMouseClicked

    //Branch view button
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            String tempbrID = txtBranchID.getText();
            int brID = Integer.parseInt(tempbrID);
            if (tempbrID.trim().isEmpty()) {
                throw new EquipBranchIDNullException();
            }
            LoadInventory(brID);
        } catch (EquipBranchIDNullException ex2) {
            JOptionPane.showMessageDialog(this, ex2.getLocalizedMessage(), "Error!", 2);
        }
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable InventoryTable;
    private javax.swing.JCheckBox chkDEqp;
    private javax.swing.JCheckBox chkMEqp;
    private javax.swing.JCheckBox chkREqp;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtBranchID;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
